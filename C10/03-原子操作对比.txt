import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicReference;

public class Counter{
	
	private AtomicInteger atomicInteger = new AtomicInteger(0); 
	private int i = 0;
	
	public static void main(String[] args) {
		final Counter cas = new Counter();
		List<Thread> ts = new ArrayList<Thread>(600);
		long start = System.currentTimeMillis();
		for (int j = 0; j < 100; j++) {
			Thread t = new Thread(new Runnable() {
				@Override
				public void run() {
					for (int i = 0; i < 10000; i++) {
						cas.count();
						cas.safeCount();
					}
				}
			});
			ts.add(t);
		}
		for (Thread thread : ts) {
			thread.start();
		}
		for (Thread thread : ts) {
			try {
				thread.join();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		System.out.println("非原子：" + cas.i);
		System.out.println("原子：" + cas.atomicInteger.get());
		System.out.println(System.currentTimeMillis() - start  + "ms");
	}
	AtomicReference<Integer> reference = new AtomicReference<Integer>(0);
	private void safeCount() {
		for(;;) {
			int ii = reference.get();
			int i = atomicInteger.get();
			boolean suc = atomicInteger.compareAndSet(i, ++i);
			if(suc) {
				break;
			}
		}
	}
	
	private void count() {
		i++;
	}
}
